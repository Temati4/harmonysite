// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====
const API_URL = 'https://harmony-server-production.up.railway.app';
const AUTH_TOKEN_KEY = 'harmony_secure_jwt_token_2024_v1';
const AUTH_USERNAME_KEY = 'harmony_secure_refresh_2024_v1';

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
let currentUser = null;
let currentToken = null;
let refreshToken = null;
let ws = null;
let selectedFriend = null;
let friends = [];
let typingTimeout = null;
let chatSettings = {
    soundNotifications: true,
    messagePreview: true,
    typingIndicator: true,
    readReceipts: true
};

// –≠–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
const emojis = [
    'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá',
    'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö',
    'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©',
    'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£',
    'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨',
    'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó',
    'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üòØ', 'üò¶', 'üòß',
    'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§¢',
    'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üí©', 'üëª', 'üíÄ',
    '‚ò†Ô∏è', 'üëΩ', 'üëæ', 'ü§ñ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ',
    'üôÄ', 'üòø', 'üòæ', 'üôà', 'üôâ', 'üôä', 'üíå', 'üíò', 'üíù', 'üíñ',
    'üíó', 'üíì', 'üíû', 'üíï', 'üíü', '‚ù£Ô∏è', 'üíî', '‚ù§Ô∏è', 'üß°', 'üíõ',
    'üíö', 'üíô', 'üíú', 'üñ§', 'üíØ', 'üí¢', 'üí•', 'üí´', 'üí¶', 'üí®',
    'üï≥Ô∏è', 'üí¨', 'üó®Ô∏è', 'üóØÔ∏è', 'üí≠', 'üí§', 'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã',
    'üññ', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà',
    'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ',
    'ü§ú', 'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üí™', 'ü¶æ',
    'ü¶ø', 'ü¶µ', 'ü¶∂', 'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü´Ä', 'ü´Å', 'ü¶∑',
    'ü¶¥', 'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'üíã', 'ü©∏', 'ü¶µ', 'ü¶∂', 'üëÇ',
    'ü¶ª', 'üëÉ', 'üß†', 'ü´Ä', 'ü´Å', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅÔ∏è', 'üëÖ'
];

// ===== –≠–õ–ï–ú–ï–ù–¢–´ DOM =====
const elements = {
    // Auth
    authSection: document.getElementById('authSection'),
    profileSection: document.getElementById('profileSection'),
    authTabs: document.querySelectorAll('.auth-tab'),
    authForms: document.querySelectorAll('.auth-form'),
    loginForm: document.getElementById('loginForm'),
    registerForm: document.getElementById('registerForm'),
    
    // Profile
    profileUsername: document.getElementById('profileUsername'),
    profileStatus: document.getElementById('profileStatus'),
    profileDate: document.getElementById('profileDate'),
    logoutBtn: document.getElementById('logoutBtn'),
    
    // Friends
    friendsList: document.getElementById('friendsList'),
    addFriendBtn: document.getElementById('addFriendBtn'),
    addFriendModal: document.getElementById('addFriendModal'),
    friendUsername: document.getElementById('friendUsername'),
    confirmAddFriend: document.getElementById('confirmAddFriend'),
    cancelAddFriend: document.getElementById('cancelAddFriend'),
    closeAddFriendModal: document.getElementById('closeAddFriendModal'),
    
    // Chat
    chatMessages: document.getElementById('chatMessages'),
    chatInput: document.getElementById('chatInput'),
    sendMessageBtn: document.getElementById('sendMessageBtn'),
    chatStatus: document.getElementById('chatStatus'),
    chatTitle: document.getElementById('chatTitle'),
    clearChatBtn: document.getElementById('clearChatBtn'),
    chatSettingsBtn: document.getElementById('chatSettingsBtn'),
    emojiBtn: document.getElementById('emojiBtn'),
    attachBtn: document.getElementById('attachBtn'),
    
    // Modals
    emojiModal: document.getElementById('emojiModal'),
    emojiGrid: document.getElementById('emojiGrid'),
    closeEmojiModal: document.getElementById('closeEmojiModal'),
    chatSettingsModal: document.getElementById('chatSettingsModal'),
    closeChatSettingsModal: document.getElementById('closeChatSettingsModal'),
    cancelChatSettings: document.getElementById('cancelChatSettings'),
    saveChatSettings: document.getElementById('saveChatSettings'),
    
    // Theme
    themeToggle: document.getElementById('themeToggle'),
    
    // Notifications
    notificationContainer: document.getElementById('notificationContainer')
};

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
document.addEventListener('DOMContentLoaded', function() {
    initThemeManager();
    initAuthTabs();
    initForms();
    initModals();
    initChatInput();
    initEmojiGrid();
    loadChatSettings();
    checkAuthStatus();
});

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–ú–û–ô =====
function initThemeManager() {
    const savedTheme = localStorage.getItem('theme') || 'dark';
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateThemeIcon(savedTheme);
    
    elements.themeToggle.addEventListener('click', toggleTheme);
}

function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    updateThemeIcon(newTheme);
}

function updateThemeIcon(theme) {
    const icon = elements.themeToggle.querySelector('i');
    icon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô =====
function initAuthTabs() {
    elements.authTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const targetTab = tab.dataset.tab;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–±—ã
            elements.authTabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã
            elements.authForms.forEach(form => form.classList.remove('active'));
            document.getElementById(`${targetTab}Form`).classList.add('active');
        });
    });
}

function initForms() {
    // Login form
    elements.loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        await handleLogin();
    });
    
    // Register form
    elements.registerForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        await handleRegister();
    });
    
    // Logout
    elements.logoutBtn.addEventListener('click', handleLogout);
}

async function handleLogin() {
    const username = document.getElementById('loginUsername').value;
    const password = document.getElementById('loginPassword').value;
    
    try {
        const response = await fetch(`${API_URL}/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
            localStorage.setItem(AUTH_TOKEN_KEY, data.token);
            localStorage.setItem(AUTH_USERNAME_KEY, data.refreshToken);
            
            currentToken = data.token;
            refreshToken = data.refreshToken;
            currentUser = data.user;
            
            showNotification('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!', 'success');
            showProfile();
        } else {
            showNotification(data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', 'error');
        }
    } catch (error) {
        console.error('Login error:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
    }
}

async function handleRegister() {
    const username = document.getElementById('registerUsername').value;
    const password = document.getElementById('registerPassword').value;
    const passwordConfirm = document.getElementById('registerPasswordConfirm').value;
    
    if (password !== passwordConfirm) {
        showNotification('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
        return;
    }
    
    try {
        const response = await fetch(`${API_URL}/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.', 'success');
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
            document.querySelector('[data-tab="login"]').click();
        } else {
            showNotification(data.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'error');
        }
    } catch (error) {
        console.error('Register error:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
    }
}

async function handleLogout() {
    try {
        if (currentToken) {
            await fetch(`${API_URL}/logout`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${currentToken}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ refreshToken })
            });
        }
    } catch (error) {
        console.error('Logout error:', error);
    }
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    localStorage.removeItem(AUTH_TOKEN_KEY);
    localStorage.removeItem(AUTH_USERNAME_KEY);
    currentToken = null;
    refreshToken = null;
    currentUser = null;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
    if (ws) {
        ws.close();
        ws = null;
    }
    
    showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', 'success');
    showAuth();
}

function checkAuthStatus() {
    const token = localStorage.getItem(AUTH_TOKEN_KEY);
    const refresh = localStorage.getItem(AUTH_USERNAME_KEY);
    
    if (token && refresh) {
        currentToken = token;
        refreshToken = refresh;
        loadUserProfile();
    } else {
        showAuth();
    }
}

async function loadUserProfile() {
    try {
        const response = await fetch(`${API_URL}/me`, {
            headers: {
                'Authorization': `Bearer ${currentToken}`
            }
        });
        
        if (response.ok) {
            const userData = await response.json();
            currentUser = userData;
            updateProfileDisplay();
            showProfile();
            loadFriends();
            connectWebSocket();
        } else {
            // –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
            if (await refreshAuthToken()) {
                loadUserProfile();
            } else {
                handleLogout();
            }
        }
    } catch (error) {
        console.error('Load profile error:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', 'error');
        showAuth();
    }
}

async function refreshAuthToken() {
    try {
        const response = await fetch(`${API_URL}/refresh-token`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ refreshToken })
        });
        
        if (response.ok) {
            const data = await response.json();
            localStorage.setItem(AUTH_TOKEN_KEY, data.token);
            localStorage.setItem(AUTH_USERNAME_KEY, data.refreshToken);
            currentToken = data.token;
            refreshToken = data.refreshToken;
            return true;
        }
    } catch (error) {
        console.error('Refresh token error:', error);
    }
    
    return false;
}

function updateProfileDisplay() {
    if (currentUser) {
        elements.profileUsername.textContent = currentUser.username;
        elements.profileDate.textContent = `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(currentUser.createdAt).toLocaleDateString()}`;
    }
}

function showAuth() {
    elements.authSection.classList.remove('hidden');
    elements.profileSection.classList.add('hidden');
}

function showProfile() {
    elements.authSection.classList.add('hidden');
    elements.profileSection.classList.remove('hidden');
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–†–£–ó–¨–Ø–ú–ò =====
async function loadFriends() {
    try {
        const response = await fetch(`${API_URL}/friends`, {
            headers: {
                'Authorization': `Bearer ${currentToken}`
            }
        });
        
        if (response.ok) {
            friends = await response.json();
            renderFriendsList();
        } else {
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π', 'error');
        }
    } catch (error) {
        console.error('Load friends error:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π', 'error');
    }
}

function renderFriendsList() {
    if (friends.length === 0) {
        elements.friendsList.innerHTML = '<div class="no-friends">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</div>';
        return;
    }
    
    elements.friendsList.innerHTML = friends.map(friend => `
        <div class="friend-item" data-friend-id="${friend.friendId}">
            <div class="friend-avatar">
                <i class="fas fa-user"></i>
            </div>
            <div class="friend-info">
                <div class="friend-name">${friend.username}</div>
                <div class="friend-status">${friend.status === 'accepted' ? '–î—Ä—É–≥' : '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'}</div>
            </div>
            ${friend.status === 'accepted' ? `
                <div class="friend-actions">
                    <button class="btn btn-sm btn-primary chat-btn" onclick="selectFriend('${friend.friendId}', '${friend.username}')">
                        <i class="fas fa-comment"></i>
                    </button>
                    <button class="btn btn-sm btn-secondary" onclick="removeFriend('${friend.friendId}')">
                        <i class="fas fa-user-minus"></i>
                    </button>
                </div>
            ` : ''}
        </div>
    `).join('');
}

async function addFriend(username) {
    try {
        const response = await fetch(`${API_URL}/friends/request`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${currentToken}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            showNotification('–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'success');
            closeModal(elements.addFriendModal);
            loadFriends();
        } else {
            showNotification(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', 'error');
        }
    } catch (error) {
        console.error('Add friend error:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', 'error');
    }
}

async function removeFriend(friendId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞?')) return;
    
    try {
        const response = await fetch(`${API_URL}/friends/${friendId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${currentToken}`
            }
        });
        
        if (response.ok) {
            showNotification('–î—Ä—É–≥ —É–¥–∞–ª–µ–Ω', 'success');
            if (selectedFriend === friendId) {
                clearChat();
            }
            loadFriends();
        } else {
            showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞', 'error');
        }
    } catch (error) {
        console.error('Remove friend error:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞', 'error');
    }
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–¢–û–ú =====
function selectFriend(friendId, friendName) {
    selectedFriend = friendId;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥—Ä—É–≥ –≤ —Å–ø–∏—Å–∫–µ
    document.querySelectorAll('.friend-item').forEach(item => {
        item.classList.remove('active');
    });
    document.querySelector(`[data-friend-id="${friendId}"]`).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
    elements.chatTitle.textContent = `–ß–∞—Ç —Å ${friendName}`;
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞
    elements.chatInput.disabled = false;
    elements.sendMessageBtn.disabled = false;
    elements.clearChatBtn.disabled = false;
    elements.chatSettingsBtn.disabled = false;
    elements.emojiBtn.disabled = false;
    elements.attachBtn.disabled = false;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    loadChatHistory(friendId);
}

function clearChat() {
    selectedFriend = null;
    elements.chatMessages.innerHTML = '<div class="no-chat"><i class="fas fa-comments"></i><p>–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞</p></div>';
    elements.chatInput.disabled = true;
    elements.sendMessageBtn.disabled = true;
    elements.clearChatBtn.disabled = true;
    elements.chatSettingsBtn.disabled = true;
    elements.emojiBtn.disabled = true;
    elements.attachBtn.disabled = true;
    elements.chatTitle.textContent = '–ß–∞—Ç';
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å
    document.querySelectorAll('.friend-item').forEach(item => {
        item.classList.remove('active');
    });
}

async function loadChatHistory(friendId) {
    try {
        const response = await fetch(`${API_URL}/messages/${friendId}`, {
            headers: {
                'Authorization': `Bearer ${currentToken}`
            }
        });
        
        if (response.ok) {
            const messages = await response.json();
            renderMessages(messages);
        } else {
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', 'error');
        }
    } catch (error) {
        console.error('Load messages error:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', 'error');
    }
}

function renderMessages(messages) {
    if (messages.length === 0) {
        elements.chatMessages.innerHTML = '<div class="no-chat"><i class="fas fa-comments"></i><p>–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–µ—Ä–≤—ã–º!</p></div>';
        return;
    }
    
    elements.chatMessages.innerHTML = messages.map(message => {
        const isSent = message.fromId === currentUser.id;
        const time = new Date(message.timestamp).toLocaleTimeString();
        const status = message.status || 'sent';
        
        return `
            <div class="message ${isSent ? 'sent' : 'received'}">
                <div class="message-content">${message.content}</div>
                <div class="message-time">${time}</div>
                ${isSent && chatSettings.readReceipts ? `
                    <div class="message-status ${status}">
                        <i class="fas fa-${status === 'read' ? 'check-double' : 'check'}"></i>
                        <span>${status === 'read' ? '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ' : status === 'delivered' ? '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' : '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}</span>
                    </div>
                ` : ''}
            </div>
        `;
    }).join('');
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;
}

function initChatInput() {
    elements.sendMessageBtn.addEventListener('click', sendMessage);
    elements.chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
    
    // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
    elements.clearChatBtn.addEventListener('click', clearChatHistory);
    
    // –í–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    elements.attachBtn.addEventListener('click', () => {
        showNotification('–§—É–Ω–∫—Ü–∏—è –≤–ª–æ–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', 'info');
    });
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    elements.chatInput.addEventListener('input', handleTyping);
}

function initEmojiGrid() {
    elements.emojiGrid.innerHTML = emojis.map(emoji => 
        `<div class="emoji-item" onclick="insertEmoji('${emoji}')">${emoji}</div>`
    ).join('');
}

function insertEmoji(emoji) {
    const input = elements.chatInput;
    const start = input.selectionStart;
    const end = input.selectionEnd;
    const text = input.value;
    
    input.value = text.substring(0, start) + emoji + text.substring(end);
    input.selectionStart = input.selectionEnd = start + emoji.length;
    input.focus();
    
    closeModal(elements.emojiModal);
}

function handleTyping() {
    if (!selectedFriend || !chatSettings.typingIndicator) return;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
            type: 'typing',
            to: selectedFriend,
            isTyping: true
        }));
    }
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
    if (typingTimeout) {
        clearTimeout(typingTimeout);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç
    typingTimeout = setTimeout(() => {
        if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({
                type: 'typing',
                to: selectedFriend,
                isTyping: false
            }));
        }
    }, 1000);
}

function loadChatSettings() {
    const saved = localStorage.getItem('chatSettings');
    if (saved) {
        chatSettings = { ...chatSettings, ...JSON.parse(saved) };
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —á–µ–∫–±–æ–∫—Å–∞–º
    document.getElementById('soundNotifications').checked = chatSettings.soundNotifications;
    document.getElementById('messagePreview').checked = chatSettings.messagePreview;
    document.getElementById('typingIndicator').checked = chatSettings.typingIndicator;
    document.getElementById('readReceipts').checked = chatSettings.readReceipts;
}

function saveChatSettings() {
    chatSettings = {
        soundNotifications: document.getElementById('soundNotifications').checked,
        messagePreview: document.getElementById('messagePreview').checked,
        typingIndicator: document.getElementById('typingIndicator').checked,
        readReceipts: document.getElementById('readReceipts').checked
    };
    
    localStorage.setItem('chatSettings', JSON.stringify(chatSettings));
    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
}

function clearChatHistory() {
    if (!selectedFriend) return;
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?')) {
        elements.chatMessages.innerHTML = '<div class="no-chat"><i class="fas fa-comments"></i><p>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞</p></div>';
        showNotification('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞', 'success');
    }
}

function sendMessage() {
    const content = elements.chatInput.value.trim();
    if (!content || !selectedFriend) return;
    
    if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
            type: 'message',
            to: selectedFriend,
            content: content
        }));
        
        elements.chatInput.value = '';
    } else {
        showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
    }
}

// ===== WEB SOCKET =====
function connectWebSocket() {
    if (!currentToken) return;
    
    const wsUrl = API_URL.replace('https://', 'wss://').replace('http://', 'ws://');
    ws = new WebSocket(`${wsUrl}?token=${currentToken}`);
    
    ws.onopen = function() {
        console.log('WebSocket connected');
        updateChatStatus(true);
    };
    
    ws.onmessage = function(event) {
        const data = JSON.parse(event.data);
        
        if (data.type === 'message') {
            // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const message = data.message;
            if (selectedFriend && (message.fromId === selectedFriend || message.toId === selectedFriend)) {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                const messages = Array.from(elements.chatMessages.children).map(el => {
                    if (el.classList.contains('message')) {
                        return {
                            fromId: el.classList.contains('sent') ? currentUser.id : selectedFriend,
                            content: el.querySelector('.message-content').textContent,
                            timestamp: new Date().toISOString(),
                            status: 'sent'
                        };
                    }
                }).filter(Boolean);
                
                messages.push(message);
                renderMessages(messages);
                
                // –ó–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (chatSettings.soundNotifications) {
                    playNotificationSound();
                }
            }
        } else if (data.type === 'messageConfirmation') {
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log('Message sent:', data.messageId);
        } else if (data.type === 'typing') {
            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            handleTypingIndicator(data);
        } else if (data.type === 'messageStatus') {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            updateMessageStatus(data);
        }
    };
    
    ws.onclose = function() {
        console.log('WebSocket disconnected');
        updateChatStatus(false);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (currentToken) {
                connectWebSocket();
            }
        }, 5000);
    };
    
    ws.onerror = function(error) {
        console.error('WebSocket error:', error);
        updateChatStatus(false);
    };
}

function updateChatStatus(connected) {
    const statusDot = elements.chatStatus.querySelector('.status-dot');
    const statusText = elements.chatStatus.querySelector('span:last-child');
    
    if (connected) {
        statusDot.className = 'status-dot online';
        statusText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω';
    } else {
        statusDot.className = 'status-dot offline';
        statusText.textContent = '–û—Ç–∫–ª—é—á–µ–Ω';
    }
}

// ===== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê =====
function initModals() {
    // Add friend modal
    elements.addFriendBtn.addEventListener('click', () => {
        showModal(elements.addFriendModal);
    });
    
    elements.closeAddFriendModal.addEventListener('click', () => {
        closeModal(elements.addFriendModal);
    });
    
    elements.cancelAddFriend.addEventListener('click', () => {
        closeModal(elements.addFriendModal);
    });
    
    elements.confirmAddFriend.addEventListener('click', () => {
        const username = elements.friendUsername.value.trim();
        if (username) {
            addFriend(username);
            elements.friendUsername.value = '';
        }
    });
    
    // Emoji modal
    elements.emojiBtn.addEventListener('click', () => {
        showModal(elements.emojiModal);
    });
    
    elements.closeEmojiModal.addEventListener('click', () => {
        closeModal(elements.emojiModal);
    });
    
    // Chat settings modal
    elements.chatSettingsBtn.addEventListener('click', () => {
        showModal(elements.chatSettingsModal);
    });
    
    elements.closeChatSettingsModal.addEventListener('click', () => {
        closeModal(elements.chatSettingsModal);
    });
    
    elements.cancelChatSettings.addEventListener('click', () => {
        closeModal(elements.chatSettingsModal);
    });
    
    elements.saveChatSettings.addEventListener('click', () => {
        saveChatSettings();
        closeModal(elements.chatSettingsModal);
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    elements.addFriendModal.addEventListener('click', (e) => {
        if (e.target === elements.addFriendModal) {
            closeModal(elements.addFriendModal);
        }
    });
    
    elements.emojiModal.addEventListener('click', (e) => {
        if (e.target === elements.emojiModal) {
            closeModal(elements.emojiModal);
        }
    });
    
    elements.chatSettingsModal.addEventListener('click', (e) => {
        if (e.target === elements.chatSettingsModal) {
            closeModal(elements.chatSettingsModal);
        }
    });
}

function showModal(modal) {
    modal.classList.add('show');
}

function closeModal(modal) {
    modal.classList.remove('show');
}

// ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
            <span>${message}</span>
        </div>
    `;
    
    elements.notificationContainer.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => {
        notification.classList.add('show');
    }, 100);
    
    // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 5000);
}

function playNotificationSound() {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
    oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);
    
    gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
    
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + 0.2);
}

function handleTypingIndicator(data) {
    if (!chatSettings.typingIndicator) return;
    
    const typingIndicator = elements.chatMessages.querySelector('.typing-indicator');
    
    if (data.isTyping) {
        if (!typingIndicator) {
            const indicator = document.createElement('div');
            indicator.className = 'typing-indicator';
            indicator.innerHTML = `
                <span>${data.fromName || '–ö—Ç–æ-—Ç–æ'} –ø–µ—á–∞—Ç–∞–µ—Ç</span>
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            `;
            elements.chatMessages.appendChild(indicator);
            elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;
        }
    } else {
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
}

function updateMessageStatus(data) {
    const messageElement = elements.chatMessages.querySelector(`[data-message-id="${data.messageId}"]`);
    if (messageElement) {
        const statusElement = messageElement.querySelector('.message-status');
        if (statusElement) {
            statusElement.className = `message-status ${data.status}`;
            statusElement.innerHTML = `
                <i class="fas fa-${data.status === 'read' ? 'check-double' : 'check'}"></i>
                <span>${data.status === 'read' ? '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ' : data.status === 'delivered' ? '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' : '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}</span>
            `;
        }
    }
} 